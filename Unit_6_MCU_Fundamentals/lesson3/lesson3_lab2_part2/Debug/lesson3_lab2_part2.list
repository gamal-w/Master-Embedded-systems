
lesson3_lab2_part2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000304  0800030c  0001030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000304  08000304  0001030c  2**0
                  CONTENTS
  4 .ARM          00000000  08000304  08000304  0001030c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000304  0800030c  0001030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000304  08000304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000308  08000308  00010308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800030c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800030c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001030c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010335  2**0
                  CONTENTS, READONLY
 13 .debug_info   000000ef  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000099  00000000  00000000  00010467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00010500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000033  00000000  00000000  00010550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f88  00000000  00000000  00010583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004e6  00000000  00000000  0001150b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003d0b  00000000  00000000  000119f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000007c  00000000  00000000  000156fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a5  00000000  00000000  00015778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002ec 	.word	0x080002ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002ec 	.word	0x080002ec

08000170 <Clock_init>:
// Clock configuration register
#define RCC_CFGR     *((volatile int*)(RCC_Base+0x04))

#define RCC_CR       *((volatile int*)(RCC_Base+0x00))

void Clock_init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	 	 	 11: not allowed
		 *
		 * */


		RCC_CFGR |=(0b10<<0);
 8000174:	4b14      	ldr	r3, [pc, #80]	; (80001c8 <Clock_init+0x58>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a13      	ldr	r2, [pc, #76]	; (80001c8 <Clock_init+0x58>)
 800017a:	f043 0302 	orr.w	r3, r3, #2
 800017e:	6013      	str	r3, [r2, #0]
			 1110: PLL input clock x 16
			 1111: PLL input clock x 16
			 *
			 * */

			RCC_CFGR |=(0b0110<<18);
 8000180:	4b11      	ldr	r3, [pc, #68]	; (80001c8 <Clock_init+0x58>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a10      	ldr	r2, [pc, #64]	; (80001c8 <Clock_init+0x58>)
 8000186:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800018a:	6013      	str	r3, [r2, #0]
	 Cleared by hardware when entering Stop or Standby mode. This bit can not be reset if the
	PLL clock is used as system clock or is selected to become the system clock.
	 0: PLL OFF
	 1: PLL ON
	 */
	RCC_CR |=(1<<24);
 800018c:	4b0f      	ldr	r3, [pc, #60]	; (80001cc <Clock_init+0x5c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a0e      	ldr	r2, [pc, #56]	; (80001cc <Clock_init+0x5c>)
 8000192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000196:	6013      	str	r3, [r2, #0]
	 0: HSI oscillator clock / 2 selected as PLL input clock
	 1: HSE oscillator clock selected as PLL input clock
	 *
	 * */

	RCC_CFGR |=(0<<16);
 8000198:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <Clock_init+0x58>)
 800019a:	4a0b      	ldr	r2, [pc, #44]	; (80001c8 <Clock_init+0x58>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	6013      	str	r3, [r2, #0]
 	 1110: SYSCLK divided by 256
 	 1111: SYSCLK divided by 512
	 *
	 * */

	RCC_CFGR |=(0b0000<<4);
 80001a0:	4b09      	ldr	r3, [pc, #36]	; (80001c8 <Clock_init+0x58>)
 80001a2:	4a09      	ldr	r2, [pc, #36]	; (80001c8 <Clock_init+0x58>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	6013      	str	r3, [r2, #0]
	 110: HCLK divided by 8
	 111: HCLK divided by 16
	 *
	 *
	 * */
	RCC_CFGR |=(0b101<<11);
 80001a8:	4b07      	ldr	r3, [pc, #28]	; (80001c8 <Clock_init+0x58>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a06      	ldr	r2, [pc, #24]	; (80001c8 <Clock_init+0x58>)
 80001ae:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80001b2:	6013      	str	r3, [r2, #0]
	 101: HCLK divided by 4
	 110: HCLK divided by 8
	 111: HCLK divided by 16
	 * */

	RCC_CFGR |=(0b100<<8);
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <Clock_init+0x58>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <Clock_init+0x58>)
 80001ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001be:	6013      	str	r3, [r2, #0]


}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	40021004 	.word	0x40021004
 80001cc:	40021000 	.word	0x40021000

080001d0 <main>:

int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
	Clock_init();
 80001d6:	f7ff ffcb 	bl	8000170 <Clock_init>
	// write on registers
	RCC_APB2ENR |=1<<2; // set the clock
 80001da:	4b1a      	ldr	r3, [pc, #104]	; (8000244 <main+0x74>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a19      	ldr	r2, [pc, #100]	; (8000244 <main+0x74>)
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	6013      	str	r3, [r2, #0]
	GPIOA_CRH&=0xff0fffff; // clear bits from bit 20 to 24
 80001e6:	4b18      	ldr	r3, [pc, #96]	; (8000248 <main+0x78>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a17      	ldr	r2, [pc, #92]	; (8000248 <main+0x78>)
 80001ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001f0:	6013      	str	r3, [r2, #0]
	GPIOA_CRH|=0x00200000;// set 2 on bits from bit 20 to 24
 80001f2:	4b15      	ldr	r3, [pc, #84]	; (8000248 <main+0x78>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a14      	ldr	r2, [pc, #80]	; (8000248 <main+0x78>)
 80001f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001fc:	6013      	str	r3, [r2, #0]


    while(1){

    	Set_bit(GPIOA_ODR,13); // set bit 13
 80001fe:	4b13      	ldr	r3, [pc, #76]	; (800024c <main+0x7c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a12      	ldr	r2, [pc, #72]	; (800024c <main+0x7c>)
 8000204:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000208:	6013      	str	r3, [r2, #0]
    	for(int i=0;i<5000;i++); // delay 5 ms
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <main+0x46>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f241 3287 	movw	r2, #4999	; 0x1387
 800021c:	4293      	cmp	r3, r2
 800021e:	ddf7      	ble.n	8000210 <main+0x40>
    	Clear_bit(GPIOA_ODR,13); // clear bit 13
 8000220:	4b0a      	ldr	r3, [pc, #40]	; (800024c <main+0x7c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a09      	ldr	r2, [pc, #36]	; (800024c <main+0x7c>)
 8000226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800022a:	6013      	str	r3, [r2, #0]
    	for(int i=0;i<5000;i++); // delay 5 ms
 800022c:	2300      	movs	r3, #0
 800022e:	603b      	str	r3, [r7, #0]
 8000230:	e002      	b.n	8000238 <main+0x68>
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	3301      	adds	r3, #1
 8000236:	603b      	str	r3, [r7, #0]
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	f241 3287 	movw	r2, #4999	; 0x1387
 800023e:	4293      	cmp	r3, r2
 8000240:	ddf7      	ble.n	8000232 <main+0x62>
    	Set_bit(GPIOA_ODR,13); // set bit 13
 8000242:	e7dc      	b.n	80001fe <main+0x2e>
 8000244:	40021018 	.word	0x40021018
 8000248:	40010804 	.word	0x40010804
 800024c:	4001080c 	.word	0x4001080c

08000250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000250:	480d      	ldr	r0, [pc, #52]	; (8000288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000252:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000254:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000258:	480c      	ldr	r0, [pc, #48]	; (800028c <LoopForever+0x6>)
  ldr r1, =_edata
 800025a:	490d      	ldr	r1, [pc, #52]	; (8000290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800025c:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <LoopForever+0xe>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000260:	e002      	b.n	8000268 <LoopCopyDataInit>

08000262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000266:	3304      	adds	r3, #4

08000268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800026c:	d3f9      	bcc.n	8000262 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000270:	4c0a      	ldr	r4, [pc, #40]	; (800029c <LoopForever+0x16>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000274:	e001      	b.n	800027a <LoopFillZerobss>

08000276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000278:	3204      	adds	r2, #4

0800027a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800027c:	d3fb      	bcc.n	8000276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800027e:	f000 f811 	bl	80002a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000282:	f7ff ffa5 	bl	80001d0 <main>

08000286 <LoopForever>:

LoopForever:
  b LoopForever
 8000286:	e7fe      	b.n	8000286 <LoopForever>
  ldr   r0, =_estack
 8000288:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800028c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000290:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000294:	0800030c 	.word	0x0800030c
  ldr r2, =_sbss
 8000298:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800029c:	2000001c 	.word	0x2000001c

080002a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a0:	e7fe      	b.n	80002a0 <ADC1_2_IRQHandler>
	...

080002a4 <__libc_init_array>:
 80002a4:	b570      	push	{r4, r5, r6, lr}
 80002a6:	2600      	movs	r6, #0
 80002a8:	4d0c      	ldr	r5, [pc, #48]	; (80002dc <__libc_init_array+0x38>)
 80002aa:	4c0d      	ldr	r4, [pc, #52]	; (80002e0 <__libc_init_array+0x3c>)
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	10a4      	asrs	r4, r4, #2
 80002b0:	42a6      	cmp	r6, r4
 80002b2:	d109      	bne.n	80002c8 <__libc_init_array+0x24>
 80002b4:	f000 f81a 	bl	80002ec <_init>
 80002b8:	2600      	movs	r6, #0
 80002ba:	4d0a      	ldr	r5, [pc, #40]	; (80002e4 <__libc_init_array+0x40>)
 80002bc:	4c0a      	ldr	r4, [pc, #40]	; (80002e8 <__libc_init_array+0x44>)
 80002be:	1b64      	subs	r4, r4, r5
 80002c0:	10a4      	asrs	r4, r4, #2
 80002c2:	42a6      	cmp	r6, r4
 80002c4:	d105      	bne.n	80002d2 <__libc_init_array+0x2e>
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002cc:	4798      	blx	r3
 80002ce:	3601      	adds	r6, #1
 80002d0:	e7ee      	b.n	80002b0 <__libc_init_array+0xc>
 80002d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d6:	4798      	blx	r3
 80002d8:	3601      	adds	r6, #1
 80002da:	e7f2      	b.n	80002c2 <__libc_init_array+0x1e>
 80002dc:	08000304 	.word	0x08000304
 80002e0:	08000304 	.word	0x08000304
 80002e4:	08000304 	.word	0x08000304
 80002e8:	08000308 	.word	0x08000308

080002ec <_init>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr

080002f8 <_fini>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	bf00      	nop
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr
