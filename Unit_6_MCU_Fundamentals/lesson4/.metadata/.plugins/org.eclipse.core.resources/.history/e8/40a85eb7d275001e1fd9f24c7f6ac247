/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

// registers
#define RCC_Base    0x40021000
#define PortA_Base  0x40010800

#define Set_bit(reg,bit)     (reg|=(1<<bit))
#define Clear_bit(reg,bit)   (reg&=~(1<<bit))

#define RCC_APB2ENR  *((volatile int*)(RCC_Base+0x18))
#define GPIOA_CRH    *((volatile int*)(PortA_Base+0x04))
#define GPIOA_ODR    *((volatile int*)(PortA_Base+0x0c))
#define GPIOA_CRL    *((volatile int*)(PortA_Base+0x00))
// Clock configuration register
#define RCC_CFGR     *((volatile int*)(RCC_Base+0x04))

#define RCC_CR       *((volatile int*)(RCC_Base+0x00))


#define EXTI_Base    0x40010400

#define EXTI_IMR     *((volatile int*)(EXTI_Base+0x00))
#define EXTI_RTSR    *((volatile int*)(EXTI_Base+0x08))
#define EXTI_PR      *((volatile int*)(EXTI_Base+0x14))

#define AFIO_Base    0x40010000

#define AFIO_EXTICR1 *((volatile int*)(AFIO_Base+0x08))


#define NVIC_ISER0   *((volatile int*)0xE000E11C


void clock_init(void){

	RCC_APB2ENR|=1<<2; // set the clock for gpio portA

//	 Bit 0 AFIOEN: Alternate function IO clock enable
//	 Set and cleared by software.
//	 0: Alternate Function IO clock disabled
//	 1: Alternate Function IO clock enabled

	RCC_APB2ENR|=(1<<0);


}

void gpioA_init(void){

	GPIOA_CRH&=0xff0fffff; // clear bits from bit 20 to 24
	GPIOA_CRH|=0x00200000;// set 2 on bits from bit 20 to 24


	GPIOA_CRL|= (0b01<<2);



}
int main(void)
{
	clock_init();
	gpioA_init();

	//External interrupt configuration register 1
	AFIO_EXTICR1|=(0b0000<<0);

	// rising trigger
	EXTI_RTSR|=(1<<0);

	//enable mask
	EXTI_IMR|=(1<<0);

	//enable pin6 in nvic in processor
	NVIC_ISER0|=(1<<6);

    while(1);

}

void EXTI0_IRQHandler(void){


	GPIOA_ODR ^=(1<<13);

	//Pending register
	//set 1 to clear
	EXTI_PR|=(1<<0);
}

